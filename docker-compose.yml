version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./deploy/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - grafana
      - kafka-ui
    networks:
      - crm_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crm_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    networks:
      - crm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crm_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-5001}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:29092}
      - KAFKA_CLIENT_ID=${KAFKA_CLIENT_ID:-crm-backend}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:-crm-group}
      - ENABLE_KAFKA=${ENABLE_KAFKA:-true}
      - PLANERKA_BEARER_TOKEN=${PLANERKA_BEARER_TOKEN}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_TOPIC_ID=${TELEGRAM_TOPIC_ID}
      - ENABLE_TELEGRAM_BOT=${ENABLE_TELEGRAM_BOT:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}
      - VERBOSE_LOGGING=${VERBOSE_LOGGING:-false}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - ENABLE_SWAGGER=${ENABLE_SWAGGER:-true}
      - ENABLE_WEBSOCKET=${ENABLE_WEBSOCKET:-true}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - crm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crm_frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost/api}
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3000:80"
    networks:
      - crm_network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: crm_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - crm_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: crm_kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - crm_network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: crm_kafka_ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - crm_network

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: crm_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost}
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - crm_network

  # Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: crm_loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki/local-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - crm_network

  # Promtail
  promtail:
    image: grafana/promtail:2.9.0
    container_name: crm_promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/promtail/config.yml:/etc/promtail/config.yml
      - ./backend/logs:/var/log/backend
      - ./frontend/logs:/var/log/frontend
      - ./services/telegrambot/logs:/var/log/telegrambot
    networks:
      - crm_network

  # Telegram Bot
  telegrambot:
    build:
      context: ./services/telegrambot
      dockerfile: Dockerfile
    container_name: crm_telegrambot
    restart: unless-stopped
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:29092}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_TOPIC_ID=${TELEGRAM_TOPIC_ID}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./services/telegrambot/logs:/app/logs
    depends_on:
      - kafka
    networks:
      - crm_network

volumes:
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  crm_network:
    driver: bridge
